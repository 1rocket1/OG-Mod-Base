    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-text-render.gc
    ;; name in dgo: mod-text-render
    ;; dgos: TODO


(define *selector-option* (selector-option splits))
(define *team-info* (info-option minimal))
(define *timer-info* (info-option minimal))
(define *splits-info* (info-option minimal))

(define *ui-text* (new 'global 'string 128 ""))
(define *timer-text* (new 'global 'string 128 ""))
(define *split-text* (new 'global 'string 128 ""))
(define *selector-text* (new 'global 'string 128 ""))

(defun get-text-3d ()
  "Allocate a debug text 3d from the list."
  (cond
   ((< (-> *debug-text-3d-trk* length) (-> *debug-text-3d-trk* allocated-length))
    (+! (-> *debug-text-3d-trk* length) 1)
    (-> *debug-text-3ds* (+ (-> *debug-text-3d-trk* length) -1))
    )
   (else
    (the-as debug-text-3d #f)
    )
   )
  )
  

(defun internal-draw-text-3d ((bucket bucket-id) (str string) (location vector) (font-color-id font-color) (offset vector2h))
  "Draw text at the given location (in 3D), with a 2D offset."
  (let ((s2-0 (new 'stack-no-clear 'vector4w)))
    (set! (-> s2-0 quad) (the-as uint128 0))
    (when (transform-point-qword! (the-as vector4w s2-0) location)
      
      (with-dma-buffer-add-bucket ((s3-0 (-> (current-frame) global-buf)) bucket)
        
        (let ((a2-2 (new 'stack 'font-context *font-default-matrix*
                         (+ (+ (-> offset x) -1792) (/ (-> s2-0 x) 16))
                         (- (+ (+ (-> offset y) -8) (/ (-> s2-0 y) 16))
                            (-> *video-parms* screen-miny)
                            )
                         0.0
                         font-color-id
                         (font-flags shadow kerning)
                         )))
          (let ((v1-9 a2-2))
            (set! (-> v1-9 origin z) (the float (/ (-> s2-0 z) 16)))
            )
          (draw-string str s3-0 a2-2)
          )
        )
      )
    )
  )

(defun add-text-3d ((arg0 symbol) (arg1 bucket-id) (arg2 string) (arg3 vector) (arg4 font-color) (arg5 vector2h))
  "Draw text at the given point. arg4 is the font-color index. arg5 is an offset and can be #f."
  (when arg0
    (#when PC_PORT
      ;; Check to see if the string should be filtered or not
      (when (pc-filter-debug-string? arg2 (vector-vector-distance arg3 (target-pos 0)))
        ;; no-op the function!
        (return #f)
        )
      )
   (cond
    (*debug-draw-pauseable*
     (let ((v1-2 (get-text-3d)))
      (when v1-2
       (set! (-> v1-2 flags) 0)
       (set! (-> v1-2 bucket) arg1)
       (set! (-> v1-2 pos quad) (-> arg3 quad))
       (cond
        (arg5
         (set! (-> v1-2 offset x) (-> arg5 x))
         (set! (-> v1-2 offset y) (-> arg5 y))
         )
        (else
         (set! (-> v1-2 offset x) 0)
         (set! (-> v1-2 offset y) 0)
         0
         )
        )
       (set! (-> v1-2 color) arg4)
       (let ((a0-6 0)
             (a1-2 (-> arg2 data))
             (v1-4 (-> v1-2 str data))
             )
        (while (and (nonzero? (-> a1-2 0)) (< a0-6 79))
         (set! (-> v1-4 0) (-> a1-2 0))
         (set! a1-2 (&-> a1-2 1))
         (set! v1-4 (&-> v1-4 1))
         (+! a0-6 1)
         )
        (set! (-> v1-4 0) (the-as uint 0))
        )
       0
       )
      )
     )
    (else
     (internal-draw-text-3d arg1 arg2 arg3 arg4 (if arg5
                                                       arg5
                                                       (new 'static 'vector2h)
                                                       )
      )
     )
    )
   )
  #f
  )

(defun level-name->display-name ((level-name string))
  (cond
    ((string= level-name "lavatube") "Lava Tube")
    ((string= level-name "beach") "Beach")
    ((string= level-name "citadel") "Citadel")
    ((string= level-name "darkcave") "Dark Cave")
    ((string= level-name "finalboss") "Final Boss")
    ((string= level-name "firecanyon") "Fire Canyon")
    ((string= level-name "jungle") "FJ")
    ((string= level-name "jungleb") "FJ Temple")
    ((string= level-name "maincave") "Spider Cave")
    ((string= level-name "misty") "Misty")
    ((string= level-name "ogre") "MP")
    ((string= level-name "robocave") "Robot Cave")
    ((string= level-name "rolling") "Basin")
    ((string= level-name "snow") "Snowy")
    ((string= level-name "sunken") "LPC Top")
    ((string= level-name "sunkenb") "LPC Bottom")
    ((string= level-name "swamp") "Boggy")
    ((string= level-name "training") "Geyser")
    ((string= level-name "village1") "Sandover")
    ((string= level-name "village2") "Rock Village")
    ((string= level-name "village3") "Volcano")
    )
  )

(defun render-player-ui ((dma-buf dma-buffer))
  (clear *ui-text*)
  (case *team-info*
    (((info-option minimal))
      (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
        (when (and
              (is-interactive? tgt-idx)
              (is-teammate? tgt-idx)
            )
          (format *ui-text* "~S (~S)~%" 
            (-> *multiplayer-info* players tgt-idx username)
            (level-name->display-name (-> *multiplayer-info* players tgt-idx current_level))
            )
          )
        )
      (draw-string-xy *ui-text* dma-buf 5 48 (font-color white) (font-flags shadow kerning))
      )
    (((info-option full))
      (dotimes (team-id MAX_TEAM_COUNT)
        (dotimes (tgt-idx MAX_MULTIPLAYER_COUNT)
          (when (and
                (not (is-inactive? tgt-idx))
                (= (-> *multiplayer-info* players tgt-idx team_id) team-id)
              )
            (format *ui-text* "~S (~S) Cells: ~d~%" 
              (-> *multiplayer-info* players tgt-idx username)
              (level-name->display-name (-> *multiplayer-info* players tgt-idx current_level))
              (-> *multiplayer-info* players tgt-idx cells_collected)
              )
            )
          )
        (format *ui-text* "~%")
        )
      (draw-string-xy *ui-text* dma-buf 5 48 (font-color white) (font-flags shadow kerning))
      )
    )
  (none) 
  )

(defun render-timer ((dma-buf dma-buffer))
  (clear *timer-text*)

  (let ((draw-rest #f))
    (when (!= (-> *multiplayer-info* timer hours) 0)
      (format *timer-text* "~d:" (-> *multiplayer-info* timer hours))
      (set! draw-rest #t)
      )

    (when (or (!= (-> *multiplayer-info* timer hours) 0) (!= (-> *multiplayer-info* timer minutes) 0))
      (if (> (-> *multiplayer-info* timer minutes) 9)
        (if draw-rest
          (format *timer-text* "~d:" (-> *multiplayer-info* timer minutes))
          (format *timer-text* "  ~d:" (-> *multiplayer-info* timer minutes))
          )
        (if draw-rest
          (format *timer-text* "0~d:" (-> *multiplayer-info* timer minutes))
          (format *timer-text* "  ~d:" (-> *multiplayer-info* timer minutes))
          )
        )
      (set! draw-rest #t)
      )

    (when (or draw-rest (!= (-> *multiplayer-info* timer seconds) 0) (!= (-> *multiplayer-info* timer milliseconds) 0))
      (case *timer-info*
        (((info-option full))
          (if (> (-> *multiplayer-info* timer seconds) 9)
            (if draw-rest
              (format *timer-text* "~d.~d ~%" (-> *multiplayer-info* timer seconds) (-> *multiplayer-info* timer milliseconds))
              (format *timer-text* "    ~d.~d ~%" (-> *multiplayer-info* timer seconds) (-> *multiplayer-info* timer milliseconds))
              )
            (if draw-rest
              (format *timer-text* "0~d.~d ~%" (-> *multiplayer-info* timer seconds) (-> *multiplayer-info* timer milliseconds) )
              (format *timer-text* "     ~d.~d ~%" (-> *multiplayer-info* timer seconds) (-> *multiplayer-info* timer milliseconds))
              )
            )
          )
        (((info-option minimal))
          (if draw-rest
            (if (> (-> *multiplayer-info* timer seconds) 9)
              (format *timer-text* "~d ~%" (-> *multiplayer-info* timer seconds))
              (format *timer-text* "0~d ~%" (-> *multiplayer-info* timer seconds))
              )
            (format *timer-text* "    ~d ~%" (-> *multiplayer-info* timer seconds))
            )
          )
        )
      (set! draw-rest #t)
      )

    (if draw-rest
      (if (= *timer-info* (info-option full))
        (draw-string-xy *timer-text* dma-buf 448 214 (font-color white) (font-flags shadow kerning))
        (draw-string-xy *timer-text* dma-buf 458 214 (font-color white) (font-flags shadow kerning))
        )
      )
    )

  (none) 
  )

(defun render-splits ((dma-buf dma-buffer))
  (clear *split-text*)

  (case *splits-info*
    (((info-option full))
      (if (string= (-> *multiplayer-info* timer split_timesave) "")
        (format *split-text* "~S ~S (~S) ~%"
          (-> *multiplayer-info* timer split_time)
          (-> *multiplayer-info* timer split_name)
          (-> *multiplayer-info* timer split_player)
          )
        (format *split-text* "~S ~S ~S (~S) ~%"
          (-> *multiplayer-info* timer split_time)
          (-> *multiplayer-info* timer split_timesave)
          (-> *multiplayer-info* timer split_name)
          (-> *multiplayer-info* timer split_player)
          )
        )
      )
    (((info-option minimal))
      (if (string= (-> *multiplayer-info* timer split_timesave) "")
        (format *split-text* "~S ~S ~%"
          (-> *multiplayer-info* timer split_time)
          (-> *multiplayer-info* timer split_name)
          )
        (format *split-text* "~S ~S ~%"
          (-> *multiplayer-info* timer split_timesave)
          (-> *multiplayer-info* timer split_name)
          )
        )
      )
    )

  (draw-string-xy *split-text* dma-buf 5 214 (font-color white) (font-flags shadow kerning))

  (none) 
  )

(defun render-selector ((dma-buf dma-buffer))
  (clear *selector-text*)
  (format *selector-text* "V")

  (case *selector-option*
    (((selector-option teams))
      (draw-string-xy *selector-text* dma-buf 8 38 (font-color orange) (font-flags shadow kerning))
      )
    (((selector-option timer))
      (draw-string-xy *selector-text* dma-buf 492 204 (font-color orange) (font-flags shadow kerning))
      )
    (((selector-option splits))
      (draw-string-xy *selector-text* dma-buf 8 204 (font-color orange) (font-flags shadow kerning))
      )
    )

  (none) 
  )